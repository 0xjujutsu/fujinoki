name: Discord API Release

on:
  workflow_dispatch:
    inputs:
      package:
        description: package to release
        required: true
        type: choice
        options:
          - discord-api
          - fujinoki

      releaseType:
        description: stable, alpha, beta, or canary?
        required: true
        type: choice
        options:
          - stable
          - alpha
          - beta
          - canary

      semverType:
        description: semver type?
        type: choice
        options:
          - patch
          - minor
          - major

      force:
        description: create a new release even if there are no new commits
        default: false
        type: boolean

env:
  NAPI_CLI_VERSION: 2.14.7
  NODE_LTS_VERSION: 20

jobs:
  start:
    if: github.repository_owner == 'kijv'
    runs-on: ubuntu-latest

    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true

      - name: Get commit of the latest tag
        run: echo "LATEST_TAG_COMMIT=$(git rev-list -n 1 $(git describe --tags --abbrev=0))" >> $GITHUB_ENV

      - name: Get latest commit
        run: echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Check if new commits since last tag
        if: ${{ github.event.inputs.releaseType != 'stable' && github.event.inputs.force != true }}
        run: |
          if [ "$LATEST_TAG_COMMIT" = "$LATEST_COMMIT" ]; then
            echo "No new commits. Exiting..."
            exit 1
          fi

      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - run: corepack enable && pnpm --version

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

  release:
    needs: [start]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true
      - run: corepack enable

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install

      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'

      - name: Build Fujinoki
        if: ${{ github.event.inputs.package == 'fujinoki' }}
        uses: ./.github/actions/build-fujinoki

      - name: Build Discord API Bindings
        if: ${{ github.event.inputs.package == 'discord-api' }}
        uses: ./.github/actions/build-discord-api
