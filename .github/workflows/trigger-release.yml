name: Trigger Release

on:
  workflow_dispatch:
    inputs:
      package:
        description: package to release
        required: true
        type: choice
        options:
          - "@fujinoki/discord-api"
          - fujinoki

      semverType:
        description: major, minor, patch, alpha, beta, or canary?
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - alpha
          - beta
          - canary

      force:
        description: create a new release even if there are no new commits
        default: false
        type: boolean

      dryRun:
        description: dry run the release
        default: false
        type: boolean

env:
  NODE_LTS_VERSION: 20

# run: |
        #   git checkout -b release-${{ inputs.package }}-${{ steps.version.outputs.RELEASE_VERSION }}
        #   cargo xtask workspace --bump ${{ github.event.inputs.semverType }} ${{ github.event.inputs.package }}
        #   git push origin release-${{ inputs.package }}-${{ steps.version.outputs.RELEASE_VERSION }} --tags --force
        #   echo "STAGE_BRANCH=$(git branch --show-current)" >> $GITHUB_OUTPUT

permissions:
  id-token: write

jobs:
  changed:
    name: Check for changes
    if: github.repository_owner == 'kijv'
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        run: git clone https://github.com/kijv/fujinoki.git --depth=25 --single-branch --branch ${GITHUB_REF_NAME:-main} .

      - name: Get commit of the latest tag
        run: echo "LATEST_TAG_COMMIT=$(git rev-list -n 1 $(git describe --tags --abbrev=0))" >> $GITHUB_ENV

      - name: Get latest commit
        run: echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Check if new commits since last tag
        if: ${{ github.event.inputs.semverType != 'major' && github.event.inputs.semverType != 'minor' && github.event.inputs.semverType != 'patch' && github.event.inputs.force != true }}
        run: |
          if [ "$LATEST_TAG_COMMIT" = "$LATEST_COMMIT" ]; then
            echo "No new commits. Exiting..."
            exit 1
          fi

      - run: corepack enable && pnpm --version

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

  stage:
    needs: [changed]
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/setup-rust

      - run: corepack enable && pnpm --version

      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'

      - name: Version
        id: version
        run: |
          cargo xtask workspace --bump ${{ github.event.inputs.semverType }} ${{ github.event.inputs.package }}
          echo "RELEASE_VERSION=$(pnpm list -r --depth -1 fujinoki --long --filter fujinoki --parseable | sed 's/.*:fujinoki@//')" >> $GITHUB_OUTPUT
      - run: echo "${{ steps.version.outputs.RELEASE_VERSION }}"
      - name: Stage Commit
        id: stage
        run: echo ""

      - name: Show Stage Commit
        run: echo "${{ steps.stage.outputs.STAGE_BRANCH }}"
    outputs:
      stage-branch: "${{ steps.stage.outputs.STAGE_BRANCH }}"
      release-version: "${{ steps.version.outputs.RELEASE_VERSION }}"

  build:
    name: Build
    needs: [changed, stage]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true
      - run: corepack enable

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install
      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'

      - name: Build Fujinoki
        if: ${{ github.event.inputs.package == 'fujinoki' }}
        uses: ./.github/actions/build-fujinoki

      - name: Build Discord API Bindings
        if: ${{ github.event.inputs.package == '@fujinoki/discord-api' }}
        uses: ./.github/actions/build-discord-api

  npm-publish:
    name: Publish to NPM
    needs: [changed, stage, build]
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/setup-rust

      - run: corepack enable && pnpm --version

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      # - name: Publish
      #   run: |
      #     if [[ "${{ github.event.inputs.package }}" == "fujinoki" ]]; then
      #       if [[ "${{ inputs.dry-run }}" == "true" ]]; then
      #         cargo xtask npm --dry-run fujinoki-cli
      #       else
      #         cargo xtask npm fujinoki-cli
      #       fi
      #     elif [[ "${{ github.event.inputs.package }}" == "@fujinoki/discord-api" ]]; then
      #       if [[ "${{ inputs.dry-run }}" == "true" ]]; then
      #         cargo xtask npm --dry-run discord-api-napi
      #       else
      #         cargo xtask npm discord-api-napi
      #       fi
      #     else
      #       echo "Invalid package specified"
      #       exit 1
      #     fi
      #   env:
      #     NPM_TOKEN: ${{ secrets.RELEASE_BOT_PAT }}

      # Upload published artifacts in case they are needed for debugging later
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: debug-artifacts
          path: artifacts

  # open-release-pr:
  #   name: Open Release PR
  #   needs: [changed, stage, build, npm-publish]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@1.0.0
  #       with:
  #         ref: ${{ needs.stage.outputs.stage-branch }}

  #     - name: Create pull request
  #       uses: thomaseizinger/create-pull-request@master
  #       if: ${{ !inputs.dryRun }}
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         head: ${{ needs.stage.outputs.stage-branch }}
  #         base: main
  #         title: "chore: release ${{ inputs.package }} (v${{ needs.stage.outputs.release-version }})"
