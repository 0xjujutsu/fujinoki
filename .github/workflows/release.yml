name: Fujinoki Release

env:
  CARGO_PROFILE_RELEASE_LTO: true
  NPM_TOKEN: ${{ secrets.RELEASE_BOT_PAT }}
  # Needed since we need to build on Xenial which doesn't have a new enough
  # GLIBC to use Node 20.
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

on:
  workflow_dispatch:
    inputs:
      increment:
        description: "SemVer Increment (prerelease = bump canary)"
        required: true
        default: "prerelease"
        type: choice
        options:
          - prerelease
          - prepatch
          - preminor
          - premajor
          - patch
          - minor
          - major
      dry_run:
        description: "Do a dry run, skipping the final publish step."
        type: boolean

jobs:
  stage:
    name: Stage Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 18
          check-latest: true
      - run: corepack enable

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install

      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'
      - name: Version
        run: |
          ./packages/fujinoki/scripts/bump-version.js ${{ inputs.increment }}
          cat version.txt
      - name: Stage Commit
        id: stage
        run: |
          cd packages/fujinoki
          make stage-release
          echo "STAGE_BRANCH=$(git branch --show-current)" >> $GITHUB_OUTPUT
      - name: Show Stage Commit
        run: echo "${{ steps.stage.outputs.STAGE_BRANCH }}"
    outputs:
      stage-branch: "${{ steps.stage.outputs.STAGE_BRANCH }}"

  build-rust:
    name: "Build Rust"
    needs: [stage]
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
            container-options: "--rm"
          - host: macos-latest
            target: "aarch64-apple-darwin"
            container-options: "--rm"
          - host: ubuntu-latest
            container: ubuntu:xenial
            container-options: "--platform=linux/amd64 --rm"
            container-setup: "apt-get update && apt-get install -y curl musl-tools sudo unzip pkg-config"
            target: "x86_64-unknown-linux-musl"
            setup: "apt-get install -y build-essential clang-5.0 lldb-5.0 llvm-5.0-dev libclang-5.0-dev"
          - host: ubuntu-latest
            container-options: "--rm"
            target: "aarch64-unknown-linux-musl"
            rust-build-env: 'CC_aarch64_unknown_linux_musl=clang AR_aarch64_unknown_linux_musl=llvm-ar RUSTFLAGS="-Clink-self-contained=yes -Clinker=rust-lld"'
            setup: "sudo apt-get update && sudo apt-get install -y build-essential musl-tools clang llvm gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu pkg-config"
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            container-options: "--rm"
    runs-on: ${{ matrix.settings.host }}
    container:
      image: ${{ matrix.settings.container }}
      options: ${{ matrix.settings.container-options }}
    steps:
      - name: Show Stage Commit
        run: echo "${{ needs.stage.outputs.stage-branch }}"
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: "${{ needs.stage.outputs.stage-branch }}"

      - name: Setup Container
        if: ${{ matrix.settings.container-setup }}
        run: ${{ matrix.settings.container-setup }}

      - name: Setup Protoc
        uses: arduino/setup-protoc@v2.1.0
        with:
          version: "26.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust Up
        if: ${{ matrix.settings.container-setup }}
        # setup-rust-toolchain uses the --retry-connrefused flag with curl to install rustup
        # this flag was added in curl 7.52.0, but the Ubuntu version we use only has 7.47.0
        run: |
          curl --proto '=https' --tlsv1.2 --retry 10 --location --silent --show-error --fail "https://sh.rustup.rs" | sh -s -- --default-toolchain none -y
          echo "${CARGO_HOME:-$HOME/.cargo}/bin" >> $GITHUB_PATH

      - name: Rust Setup
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.settings.target }}
          # needed to not make it override the defaults
          rustflags: ""
          # we want more specific settings
          cache: false

      - name: Build Setup
        shell: bash
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}

      - name: Build
        run: ${{ matrix.settings.rust-build-env }} cargo cargo-build --profile release-fujinoki --target ${{ matrix.settings.target }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fujinoki-${{ matrix.settings.target }}
          path: target/${{ matrix.settings.target }}/release-fujinoki/fujinoki-cli*

  npm-publish:
    name: "Publish To NPM"
    runs-on: ubuntu-latest
    needs: [stage, build-rust]
    steps:
      - name: Show Stage Commit
        run: echo "${{ needs.stage.outputs.stage-branch }}"
      - uses: actions/checkout@v3
        with:
          ref: "${{ needs.stage.outputs.stage-branch }}"
      - run: git fetch origin --tags

      - run: corepack enable
      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
      - run: pnpm install

      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'

      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          path: rust-artifacts

      - name: Move Rust artifacts into place
        run: |
          mv rust-artifacts/fujinoki-aarch64-apple-darwin/fujinoki packages/fujinoki/native/fujinoki-darwin-arm64
          mv rust-artifacts/fujinoki-aarch64-unknown-linux-musl/fujinoki packages/fujinoki/native/fujinoki-linux-arm64
          cp -r rust-artifacts/fujinoki-x86_64-pc-windows-msvc/fujinoki packages/fujinoki/native/fujinoki-windows-arm64
          mv rust-artifacts/fujinoki-x86_64-unknown-linux-musl/fujinoki packages/fujinoki/native/fujinoki-linux-x64
          mv rust-artifacts/fujinoki-x86_64-apple-darwin/fujinoki packages/fujinoki/native/fujinoki-darwin-x64
          mv rust-artifacts/fujinoki-x86_64-pc-windows-msvc/fujinoki packages/fujinoki/native/fujinoki-winows-x64

      - name: Perform Release
        run: cd packages/fujinoki && make publish SKIP_PUBLISH=${{ inputs.dry_run && '--skip-publish' || '' }}
        env:
          NPM_TOKEN: ${{ secrets.RELEASE_BOT_PAT }}

      # Upload published artifacts in case they are needed for debugging later
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fujinoki
          path: packages/fujinoki/native

  create-release-pr:
    name: "Open Release Branch PR"
    needs: [stage, npm-publish]
    runs-on: ubuntu-latest
    steps:
      - name: Show Stage Commit
        run: echo "${{ needs.stage.outputs.stage-branch }}"
      - uses: actions/checkout@1.0.0
        with:
          ref: ${{ needs.stage.outputs.stage-branch }}
      - name: Get version
        id: getVersion
        run: echo "version=$(head -n 1 version.txt)" >> $GITHUB_OUTPUT
      - name: Create pull request
        uses: thomaseizinger/create-pull-request@master
        if: ${{ !inputs.dry_run }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ needs.stage.outputs.stage-branch }}
          base: main
          title: "release(fujinoki): ${{ steps.getVersion.outputs.version }}"
