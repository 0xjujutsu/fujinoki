name: Release

on:
  workflow_dispatch:
    inputs:
      package:
        description: package to release
        required: true
        type: choice
        options:
          - "@fujinoki/discord-api"
          - fujinoki

      semverType:
        description: major, minor, patch, alpha, beta, or canary?
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
          - alpha
          - beta
          - canary

      force:
        description: create a new release even if there are no new commits
        default: false
        type: boolean

      dryRun:
        description: dry run the release
        default: false
        type: boolean

env:
  NODE_LTS_VERSION: 20

# run: |
#   git checkout -b release-${{ inputs.package }}-${{ steps.version.outputs.RELEASE_VERSION }}
#   cargo xtask workspace --bump ${{ github.event.inputs.semverType }} ${{ github.event.inputs.package }}
#   git push origin release-${{ inputs.package }}-${{ steps.version.outputs.RELEASE_VERSION }} --tags --force
#   echo "STAGE_BRANCH=$(git branch --show-current)" >> $GITHUB_OUTPUT

permissions:
  id-token: write

jobs:
  changed:
    name: Check for changes
    if: github.repository_owner == 'kijv'
    runs-on: ubuntu-latest

    steps:
      - name: Clone repo
        run: git clone https://github.com/kijv/fujinoki.git --depth=25 --single-branch --branch ${GITHUB_REF_NAME:-main} .

      - name: Get commit of the latest tag
        run: echo "LATEST_TAG_COMMIT=$(git rev-list -n 1 $(git describe --tags --abbrev=0))" >> $GITHUB_ENV

      - name: Get latest commit
        run: echo "LATEST_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Check if new commits since last tag
        if: ${{ github.event.inputs.semverType != 'major' && github.event.inputs.semverType != 'minor' && github.event.inputs.semverType != 'patch' && github.event.inputs.force != true }}
        run: |
          if [ "$LATEST_TAG_COMMIT" = "$LATEST_COMMIT" ]; then
            echo "No new commits. Exiting..."
            exit 1
          fi

      - run: corepack enable && pnpm --version

      - id: get-store-path
        run: |
          pnpm store path
          echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

  stage:
    name: Stage and bump version
    needs: [changed]
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/setup-rust

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: xtask-${{ hashFiles('xtask/**/*') }}
          cache-targets: "false"

      - run: corepack enable && pnpm --version

      - name: Configure git
        run: |
          git config --global user.name 'release bot'
          git config --global user.email 'release@jujutsu.studio'

      - id: prepare-branch
        run: |
          current_time=$(date +"%y%m%d%H%M")
          git checkout -b staging-${{ github.event.inputs.package }}-$current_time
          echo "STAGE_BRANCH=$(git branch --show-current)" >> $GITHUB_OUTPUT

      - name: Version
        id: version
        # cargo xtask workspace --bump ${{ github.event.inputs.semverType }} ${{ github.event.inputs.package }}
        run: |
          echo "RELEASE_VERSION=$(pnpm list -r --depth -1 ${{ github.event.inputs.package }} --long --filter ${{ github.event.inputs.package }} --parseable | rev | cut -d '@' -f 1 | rev)" >> $GITHUB_OUTPUT

      - name: Stage
        run: |
          git push origin ${{ steps.prepare-branch.outputs.STAGE_BRANCH }} --tags --force

      - name: Show Release Version
        run: echo "${{ steps.version.outputs.RELEASE_VERSION }}"

      - name: Show Stage Commit
        run: echo "${{ steps.prepare-branch.outputs.STAGE_BRANCH }}"
    outputs:
      stage-branch: "${{ steps.prepare-branch.outputs.STAGE_BRANCH }}"
      release-version: "${{ steps.version.outputs.RELEASE_VERSION }}"

  build-discord-api:
    name: Build Discord API Bindings
    needs: [stage]
    if: ${{ github.event.inputs.package == '@fujinoki/discord-api' }}
    strategy:
      fail-fast: false
      matrix:
        # xtask/src/publish/mod.rs:64
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"

          - host: macos-latest
            target: "aarch64-apple-darwin"
            # setup: "apt-get install -y build-essential clang-5.0 lldb-5.0 llvm-5.0-dev libclang-5.0-dev"

          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            # setup: "apt-get install -y build-essential clang-5.0 lldb-5.0 llvm-5.0-dev libclang-5.0-dev"

          - host: windows-latest
            target: "x86_64-pc-windows-msvc"
            setup: "git config --system core.longpaths true"
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/build-rust
        with:
          target: ${{ matrix.settings.target }}
          setup: ${{ matrix.settings.setup }}
          profile: release-discord-api
          crate: discord-api-napi
          build-output-files: libdiscord_api_napi*

  build-fujinoki:
    name: Build Fujinoki
    needs: [stage]
    if: ${{ github.event.inputs.package == 'fujinoki' }}
    strategy:
      fail-fast: false
      matrix:
        # xtask/src/publish/mod.rs:64
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"

          - host: macos-latest
            target: "aarch64-apple-darwin"
            # setup: "apt-get install -y build-essential clang-5.0 lldb-5.0 llvm-5.0-dev libclang-5.0-dev"

          - host: ubuntu-latest
            target: "x86_64-unknown-linux-musl"
            # setup: "apt-get install -y build-essential clang-5.0 lldb-5.0 llvm-5.0-dev libclang-5.0-dev"

          - host: windows-latest
            target: "x86_64-pc-windows-msvc"
    runs-on: ${{ matrix.settings.host }}
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/build-rust
        with:
          target: ${{ matrix.settings.target }}
          setup: ${{ matrix.settings.setup }}
          profile: release-fujinoki
          crate: fujinoki-cli
          build-output-files: fujinoki-cli*
          additional-rust-cache-key: ${{ hashFiles('crates/turborepo-binding/Cargo.toml') }}

  npm-publish:
    name: Publish to NPM
    needs: [build-fujinoki, build-discord-api]
    if: ${{ github.event.inputs.package == 'fujinoki' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_LTS_VERSION }}
          check-latest: true

      - uses: actions/checkout@v4

      - name: Install Rust
        uses: ./.github/actions/setup-rust

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: xtask-${{ hashFiles('xtask/**/*') }}
          cache-targets: "false"

      - run: corepack enable && pnpm --version

      - id: get-store-path
        run: echo STORE_PATH=$(pnpm store path) >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        timeout-minutes: 5
        id: cache-pnpm-store
        with:
          path: ${{ steps.get-store-path.outputs.STORE_PATH }}
          key: pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-store-
            pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Download Rust artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Publish
        if: ${{ !inputs.dryRun }}
        run: |
          echo "Publishing ${{ github.event.inputs.package }}"

      # Upload published artifacts in case they are needed for debugging later
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: debug-artifacts
          path: artifacts

  open-release-pr:
    name: Open Release PR
    needs: [stage, npm-publish]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@1.0.0
        with:
          ref: ${{ needs.stage.outputs.stage-branch }}

      - name: Create pull request
        uses: thomaseizinger/create-pull-request@master
        if: ${{ !inputs.dryRun }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          head: ${{ needs.stage.outputs.stage-branch }}
          base: main
          title: "chore: release ${{ inputs.package }} (v${{ needs.stage.outputs.release-version }})"
