name: Code quality

on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  actions: write
  contents: read
  pull-requests: read

jobs:
  determine_jobs:
    name: Determine jobs to run
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: CI related changes
        id: ci
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            .github/actions/**
            .github/workflows/code-quality.yml

      - name: Rust related changes
        id: rust
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            pnpm-lock.yaml
            package.json
            Cargo.**
            crates/**
            .cargo/**
            rust-toolchain.toml
            !**.md
            !**.mdx

      - name: Biome linter related changes
        id: biome
        uses: technote-space/get-diff-action@v6
        with:
          PATTERNS: |
            **/*.{js,jsx,ts,tsx,json,jsonc,css,graphql,yaml,yml,html}

    outputs:
      rust: ${{ steps.ci.outputs.diff != '' || steps.rust.outputs.diff != '' }}
      biome: ${{ steps.ci.outputs.diff != '' || steps.biome.outputs.diff != '' }}

  rust_lint:
    needs: [determine_jobs]
    if: needs.determine_jobs.outputs.rust == 'true'
    name: Rust lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: ./.github/actions/setup-rust

      - name: Cache on ${{ github.ref_name }}
        uses: ijjk/rust-cache@v1.0.8

      - name: Run cargo fmt check
        run: |
          cargo fmt --check

      - name: Check Cargo.toml formatting (taplo)
        run: npx @taplo/cli@0.5.2 format --check


  biome_lint:
    name: Biome Lint
    runs-on: ubuntu-latest
    needs: determine_jobs
    if: needs.determine_jobs.outputs.biome == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Biome
        uses: biomejs/setup-biome@v2
        with:
          version: latest

      - name: Linter
        run: biome ci . --reporter=github --formatter-enabled=false

      - name: Formatter
        # keep this in sync with package.json (biome:format)
        run: biome check --linter-enabled=false --organize-imports-enabled=true
