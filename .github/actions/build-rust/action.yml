name: 'Build Rust'
description: 'Builds a Rust crate for a given target'

inputs:
  cache:
    description: 'Cache path to use (or false to not use cache)'
    required: true
  container-setup:
    description: 'Container setup command to run'
    required: false
  setup:
    description: 'Setup command to run'
    required: false
  rust-build-env:
    description: 'Rust build environment variables'
    required: false
  target:
    description: 'Rust target to build for'
    required: true
  additional-rust-cache-key:
    description: 'Additional key to add to the Rust cache'
    required: false
  profile:
    description: 'Cargo profile to build with'
    required: false
  crate:
    description: 'Specific crate to build'
    required: false
  artifact-name:
    description: 'Name of the artifact to upload'
    required: false
  build-output-files:
    description: 'Files to upload as the artifact (ex. libdiscord_api_napi* or fujinoki-cli*)'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Setup Container
      shell: bash
      if: ${{ inputs.container-setup != null }}
      run: ${{ inputs.container-setup }}

    - uses: actions/checkout@v4

    - name: Restore build cache
      id: cache
      uses: actions/cache/restore@v4
      if: ${{ inputs.cache != 'false' }}
      with:
        path: target/${{ inputs.target }}/${{ inputs.profile }}
        key: ${{ inputs.cache }}-${{ inputs.target }}-${{ inputs.profile || '' }}-${{ inputs.crate || '' }}

    - name: Upload build cache as artifact
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name || format('{0}-{1}', inputs.crate, inputs.target) }}
        path: target/${{ inputs.target }}/${{ inputs.profile && format('{0}/', inputs.profile) }}${{ inputs.build-output-files }}
        if-no-files-found: error

    - run: |
        if [ -d target/${{ inputs.target }}/${{ inputs.profile }} ]; then
          echo "Cache hit, skipping build"
          exit 0
        fi

    - name: Install Rust
      uses: ./.github/actions/setup-rust
      with:
        targets: ${{ inputs.target }}

    - uses: Swatinem/rust-cache@v2
      with:
        shared-key: build-rust-${{ hashFiles('.cargo/config.toml') }}-${{ hashFiles('crates/turbopack-binding/Cargo.toml') }}-${{ inputs.additional-rust-cache-key || '' }}

    - name: Setup toolchain
      shell: bash
      run: ${{ inputs.setup }}
      if: ${{ inputs.setup != null }}

    - name: Build
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
      shell: bash
      run: ${{ inputs.rust-build-env || '' }} cargo build ${{ inputs.profile && format('--profile {0}', inputs.profile) || '' }} ${{ inputs.crate && format('-p {0}', inputs.crate) || '' }} --target ${{ inputs.target }}

    - name: Save cache
      if: ${{ inputs.cache != 'false' && steps.cache.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: target/${{ inputs.target }}/${{ inputs.profile && format('{0}/', inputs.profile) }}
        key: ${{ inputs.cache }}-${{ inputs.target }}-${{ inputs.profile || '' }}-${{ inputs.crate || '' }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name || format('{0}-{1}', inputs.crate, inputs.target) }}
        path: target/${{ inputs.target }}/${{ inputs.profile && format('{0}/', inputs.profile) }}${{ inputs.build-output-files }}
